package com.emergencyskills.doe.aed.utils;

import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.util.Log;
import android.widget.Toast;

import com.emergencyskills.doe.aed.UI.activity.TabsActivity;
import com.emergencyskills.doe.aed.UI.fragments.PendingUploadsFragment;
import com.emergencyskills.doe.aed.models.PendingUploadModel;
import com.emergencyskills.doe.aed.models.Schoolinfomodel;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;

/**
 * Created by Karan on 12/24/2015.
 */
public class NetworkStateBroadcast extends BroadcastReceiver {
    JSONObject pending=new JSONObject();
    String drillsign="no",servicesign="no",installsign="no";
    String drilltime,drillname,drilldate,servicetime,servicedate,servicename,installtime,installdate,installname,drilldata,servicedata,installdata;
    Context mycontext;
    String drillesrimage,drillesrname,serviceesrimage,servicecesrname,installesrimage,installesrname;
    @Override
    public void onReceive(Context context, Intent intent) {


        Networkstate networkstate =new Networkstate(context);
        if(networkstate.haveNetworkConnection()) {
            mycontext = context;

            mycontext.sendBroadcast(new Intent("uploadsuccessful"));





            /*listops listops = new listops(context);
            ArrayList<Schoolinfomodel> drillist = listops.getdrilllist();
            ArrayList<Schoolinfomodel> serviceist = listops.getservicelist();
            ArrayList<Schoolinfomodel> installist = listops.getinstalllist();
            ArrayList<PendingUploadModel> pendinglist = listops.getpendinglist();
            ArrayList<PendingUploadModel> templist = pendinglist;
            if (pendinglist.size() > 0) {

                while (pendinglist.size() > 0) {
                    pending = new JSONObject();
                    for (int i = 0; i < templist.size(); i++) {

                        Log.e("size", templist.size() + " " + i);
                        PendingUploadModel pendingUploadModel = templist.get(i);
                        String code = pendingUploadModel.getCode();
                        if (pendingUploadModel.getDrillstatus().equals("Pending")) {
                            int check = checklistcontainscodeandset(code, drillist);
                            if (check != -1) {
                                drillist.get(check).setDrillstatus("Completed");
                                listops.putdrilllist(drillist);
                                drillsign = drillist.get(check).getDrillsignimage();
                                drilltime = drillist.get(check).getDrilltime();
                                drillname = drillist.get(check).getDrillname();
                                drilldate = drillist.get(check).getDrilldate();
                                drilldata = drillist.get(check).getDrilldata();
                                drillesrname = drillist.get(check).getEsrname();
                                drillesrimage = drillist.get(check).getEsrimage();
                                String sname ;

                                try {
                                     sname = drillist.get(check).getSchoolnamefromsign();
                                    Log.e("f",sname);

                                }
                                catch (Exception e)
                                {
                                    sname="";
                                }

                                try {
                                    new Senddata().execute(drillsign, "uploadDrill", drilldata, drilldate, drilltime, drillname, "Sending" + " " + sname + " " + "Drill data", drillesrname, drillesrimage, sname).get();
                                } catch (Exception e) {
                                    Log.e("FS", e.getMessage());
                                }


                            }


                        }

                        if (pendingUploadModel.getServicestatus().equals("Pending")) {
                            int check = checklistcontainscodeandset(code, serviceist);
                            if (check != -1) {
                                serviceist.get(check).setServicestatus("Completed");
                                listops.putservicelist(serviceist);


                                servicesign = serviceist.get(check).getServicesignimage();
                                servicename = serviceist.get(check).getServicename();

                                servicedate = serviceist.get(check).getServicesdate();

                                servicetime = serviceist.get(check).getServicetime();
                                servicedata = serviceist.get(check).getServicedata();

                                serviceesrimage = serviceist.get(check).getEsrimageser();
                                servicecesrname = serviceist.get(check).getEsrnameser();

                                String sname ;

                                try {
                                    sname = serviceist.get(check).getSchoolnamefromsign();
                                    Log.e("f",sname);

                                }
                                catch (Exception e)
                                {
                                    sname="";
                                }

                                try {

                                    new Senddata().execute(servicesign, "uploadServiceCall", servicedata, servicedate, servicetime, servicename, "Sending" + " " + sname + " " + "Service Call data", servicecesrname, serviceesrimage, sname).get();
                                } catch (Exception e) {
                                    Log.e("FS", e.getMessage());
                                }

                            }


                        }
                        if (pendingUploadModel.getInstallstatus().equals("Pending")) {
                            int check = checklistcontainscodeandset(code, installist);
                            if (check != -1) {
                                installist.get(check).setInstallstatus("Completed");
                                listops.putinstallllist(installist);

                                installsign = installist.get(check).getNewinstallsignimage();
                                installdate = installist.get(check).getInstalldate();
                                installtime = installist.get(check).getInstalltime();
                                installname = installist.get(check).getInstallname();
                                installdata = installist.get(check).getNewinstalldata();
                                installesrimage = installist.get(check).getEsrimageinstall();
                                installesrname = installist.get(check).getEsrnameinstall();

                                String sname ;

                                try {
                                    sname = installist.get(check).getSchoolnamefromsign();
                                    Log.e("f",sname);

                                }
                                catch (Exception e)
                                {
                                    sname="";
                                }
                                try {
                                    new Senddata().execute(installsign, "uploadNewInstall", installdata, installdate, installtime, installname, "Sending" + " " + sname + " " + "New Install data", installesrname, installesrimage, sname).get();
                                } catch (Exception e) {
                                    Log.e("FS", e.getMessage());
                                }
                            }


                        }
                        pendinglist.remove(i);


                    }
                    listops.putpendinglist(pendinglist);


                }
                try {
                    MyToast.popmessage("Pending uploads successful", mycontext);
                    mycontext.sendBroadcast(new Intent("uploadsuccessful"));
                }
                catch(Exception e)
                {

                }

            }*/
        }

        }

    private int checklistcontainscodeandset(String code,ArrayList<Schoolinfomodel> data) {

        try {
            int i = -1;

            for (int pass = 0; pass < data.size(); pass++) {
                if (data.get(pass).getSchoolcode().equals(code)) {
                    i = pass;
                }
            }
            return i;
        }
        catch (Exception e)
        {
            return -1;
        }
    }


    class Senddata extends AsyncTask<String, Integer, String> {

        ProgressDialog dialog;
        File f,f2;

        HttpURLConnection conn = null;
        DataOutputStream dos = null;
        String lineEnd = "\r\n";
        String twoHyphens = "--";
        String boundary = "*****";
        int bytesRead, bytesAvailable, bufferSize,bytesRead2, bytesAvailable2, bufferSize2;
        byte[] buffer,buffer2;
        int maxBufferSize = 1 * 1024 * 1024;

        String line = null;
        listops listops = new listops(mycontext);


        String floatMessage = "nodata";


        @Override
        protected void onPreExecute() {


            //create a file to write bitmap data

            super.onPreExecute();
        }

        @Override
        protected String doInBackground(String... urls) {
            try {




                if(!urls[0].equals("no")) {

                   // Log.e("which",urls[1]);
                    f = new File(urls[0]);


                    FileInputStream fileInputStream = new FileInputStream(f);
                    f2 = new File(urls[8]);


                    FileInputStream fileInputStream2 = new FileInputStream(f2);


                    URL url = new URL("http://doe.emergencyskills.com/api/api.php");
                    //URL url = new URL("http://workintelligent.com/TagFrame/webservice/testing");
                    conn = (HttpURLConnection) url.openConnection();
                    conn.setDoInput(true); // Allow Inputs
                    conn.setDoOutput(true); // Allow Outputs
                    conn.setUseCaches(false); // Don't use a Cached Copy
                    conn.setRequestMethod("POST");
                    conn.setRequestProperty("Connection", "Keep-Alive");
                    //  conn.setRequestProperty("ENCTYPE", "multipart/form-data");
                    conn.setRequestProperty("Content-Type", "multipart/form-data;boundary=" + boundary);
                    conn.setRequestProperty("media_file", urls[0]);


                    dos = new DataOutputStream(conn.getOutputStream());


                    dos.writeBytes(twoHyphens + boundary + lineEnd);

//Adding Parameter name


                    dos.writeBytes("Content-Disposition: form-data; name=\"apikey\"" + lineEnd);
                    //dos.writeBytes("Content-Type: text/plain; charset=UTF-8" + lineEnd);
                    //dos.writeBytes("Content-Length: " + name.length() + lineEnd);
                    dos.writeBytes(lineEnd);
                    dos.writeBytes("daMEs26rufAqasw2pUYU"); // mobile_no is String variable
                    dos.writeBytes(lineEnd);

                    dos.writeBytes(twoHyphens + boundary + lineEnd);


                    //adding parameter description
                    dos.writeBytes("Content-Disposition: form-data; name=\"method\"" + lineEnd);
                    //dos.writeBytes("Content-Type: text/plain; charset=UTF-8" + lineEnd);
                    //dos.writeBytes("Content-Length: " + name.length() + lineEnd);
                    dos.writeBytes(lineEnd);
                    dos.writeBytes(urls[1]); // mobile_no is String variable
                    dos.writeBytes(lineEnd);

                    dos.writeBytes(twoHyphens + boundary + lineEnd);

                    //adding parameter  event id
                    dos.writeBytes("Content-Disposition: form-data; name=\"data\"" + lineEnd);
                    //dos.writeBytes("Content-Type: text/plain; charset=UTF-8" + lineEnd);
                    //dos.writeBytes("Content-Length: " + name.length() + lineEnd);
                    dos.writeBytes(lineEnd);
                    dos.writeBytes(urls[2]); // mobile_no is String variable
                    dos.writeBytes(lineEnd);

                    dos.writeBytes(twoHyphens + boundary + lineEnd);


                    //adding parameter  event id
                    dos.writeBytes("Content-Disposition: form-data; name=\"schoolname\"" + lineEnd);
                    //dos.writeBytes("Content-Type: text/plain; charset=UTF-8" + lineEnd);
                    //dos.writeBytes("Content-Length: " + name.length() + lineEnd);
                    dos.writeBytes(lineEnd);
                    dos.writeBytes(urls[9]); // mobile_no is String variable
                    dos.writeBytes(lineEnd);

                    dos.writeBytes(twoHyphens + boundary + lineEnd);

                    //adding parameter  event id
                    dos.writeBytes("Content-Disposition: form-data; name=\"uploader\"" + lineEnd);
                    //dos.writeBytes("Content-Type: text/plain; charset=UTF-8" + lineEnd);
                    //dos.writeBytes("Content-Length: " + name.length() + lineEnd);
                    dos.writeBytes(lineEnd);
                    dos.writeBytes(listops.getString("username")); // mobile_no is String variable
                    dos.writeBytes(lineEnd);

                    dos.writeBytes(twoHyphens + boundary + lineEnd);


                    //adding parameter  event id
                    dos.writeBytes("Content-Disposition: form-data; name=\"date\"" + lineEnd);
                    //dos.writeBytes("Content-Type: text/plain; charset=UTF-8" + lineEnd);
                    //dos.writeBytes("Content-Length: " + name.length() + lineEnd);
                    dos.writeBytes(lineEnd);
                    dos.writeBytes(urls[3]); // mobile_no is String variable
                    dos.writeBytes(lineEnd);

                    dos.writeBytes(twoHyphens + boundary + lineEnd);

                    //adding parameter  event id
                    dos.writeBytes("Content-Disposition: form-data; name=\"time\"" + lineEnd);
                    //dos.writeBytes("Content-Type: text/plain; charset=UTF-8" + lineEnd);
                    //dos.writeBytes("Content-Length: " + name.length() + lineEnd);
                    dos.writeBytes(lineEnd);
                    dos.writeBytes(urls[4]); // mobile_no is String variable
                    dos.writeBytes(lineEnd);

                    dos.writeBytes(twoHyphens + boundary + lineEnd);

                    //adding parameter  event id
                    dos.writeBytes("Content-Disposition: form-data; name=\"name\"" + lineEnd);
                    //dos.writeBytes("Content-Type: text/plain; charset=UTF-8" + lineEnd);
                    //dos.writeBytes("Content-Length: " + name.length() + lineEnd);
                    dos.writeBytes(lineEnd);

                    dos.writeBytes(urls[5]); // mobile_no is String variable
                    dos.writeBytes(lineEnd);

                    dos.writeBytes(twoHyphens + boundary + lineEnd);
                    //adding parameter  event id

                    //adding parameter  event id
                    dos.writeBytes("Content-Disposition: form-data; name=\"esr_name\"" + lineEnd);
                    //dos.writeBytes("Content-Type: text/plain; charset=UTF-8" + lineEnd);
                    //dos.writeBytes("Content-Length: " + name.length() + lineEnd);
                    dos.writeBytes(lineEnd);

                    dos.writeBytes(urls[7]); // mobile_no is String variable
                    dos.writeBytes(lineEnd);

                    dos.writeBytes(twoHyphens + boundary + lineEnd);
                    //adding parameter  event id


                    dos.writeBytes("Content-Disposition: form-data; name=\"media_file_esr\";filename=\"" + urls[8] + "\"" + lineEnd);
                    dos.writeBytes(lineEnd);


                    // create a buffer of maximum size
                    bytesAvailable = fileInputStream2.available();
                    bufferSize = Math.min(bytesAvailable, maxBufferSize);
                    buffer = new byte[bufferSize];
                    // read file and write it into form...
                    bytesRead = fileInputStream2.read(buffer, 0, bufferSize);

                    while (bytesRead > 0) {


                        dos.write(buffer, 0, bufferSize);
                        bytesAvailable = fileInputStream2.available();
                        bufferSize = Math.min(bytesAvailable, maxBufferSize);
                        bytesRead = fileInputStream2.read(buffer, 0, bufferSize);


                    }

                    // send multipart form data necesssary after file data...
                    dos.writeBytes(lineEnd);
                    dos.writeBytes(twoHyphens + boundary + lineEnd) ;
                    fileInputStream2.close();;




                    dos.writeBytes("Content-Disposition: form-data; name=\"media_file\";filename=\"" + urls[0] + "\"" + lineEnd);
                    dos.writeBytes(lineEnd);



                    // create a buffer of maximum size
                    bytesAvailable2 = fileInputStream.available();
                    bufferSize2 = Math.min(bytesAvailable2, maxBufferSize);
                    buffer2 = new byte[bufferSize2];
                    // read file and write it into form...
                    bytesRead2 = fileInputStream.read(buffer2, 0, bufferSize2);

                    while (bytesRead2 > 0) {


                        dos.write(buffer2, 0, bufferSize2);
                        bytesAvailable2 = fileInputStream.available();
                        bufferSize2 = Math.min(bytesAvailable2, maxBufferSize);
                        bytesRead2 = fileInputStream.read(buffer2, 0, bufferSize2);


                    }

                    // send multipart form data necesssary after file data...
                    dos.writeBytes(lineEnd);
                    dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);








                    //conn.setRequestMethod("GET");
                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                    StringBuilder stringBuilder = new StringBuilder();

                    fileInputStream.close();
                    while ((line = bufferedReader.readLine()) != null) {
                        stringBuilder.append(line + '\n');
                    }

                    String jsonString = stringBuilder.toString();
                    Log.e("jsonString", jsonString);
                    JSONObject resJson = new JSONObject(jsonString);
                    floatMessage = resJson.getString("status");
                    Log.e("floatMessage", floatMessage);
                    dos.flush();
                    dos.close();

                }



            }
            catch (Exception e) {
                Log.e("das",String.valueOf(e.getMessage()));
            }
            return floatMessage;
        }




        protected void onPostExecute(String result) {
           // dialog.dismiss();

            super.onPostExecute(result);
//            Log.e("afs",floatMessage);

            try {


                if (f.exists()) {
                    f.delete();
                }
                if (f2.exists()) {
                    f2.delete();
                }
            }
            catch (Exception e)
            {

            }









        }
    }

    private static String convertInputStreamToString(InputStream inputStream) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
        String line = "";
        String result = "";
        while ((line = bufferedReader.readLine()) != null)
            result += line;
        inputStream.close();
        return result;

    }

}



